/**************************************************************************
***    Copyright (c) 2011 S. Mohammad Khansari-Zadeh, LASA Lab, EPFL,   ***
***          CH-1015 Lausanne, Switzerland, http://lasa.epfl.ch         ***
***************************************************************************
*
* The program is free for non-commercial academic use, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.. Please contact the author if you are interested
* in using the software for commercial purposes. The software must not be
* modified or distributed without prior permission of the authors. Please
* acknowledge the authors in any academic publications that have made use
* of this code or part of it. Please use this BibTex reference:
*
*   S. M. Khansari Zadeh and A. Billard, "Imitation learning of Globally
*   Stable Non-Linear Point-to-Point Robot Motions using Nonlinear
*   Programming", in Proceeding of the 2010 IEEE/RSJ International
*   Conference on Intelligent Robots and Systems (IROS 2010), Taipei,
*   Taiwan, October 2010
*
* The author DOES NOT take any responsibility for this software.
*
* To get latest upadate of the software please visit:
*                          http://lasa.epfl.ch/khansari
*
* Please send your feedbacks or questions to:
*                           mohammad.khansari_at_epfl.ch
***************************************************************************/

#ifndef GMR_LITE_H
#define GMR_LITE_H

#include "MathLib.h"

#ifdef USE_MATHLIB_NAMESPACE
    namespace MathLib {
#endif

class GaussianMixture {

    public :
        int nState,dim;
        Matrix Mu;
        Matrix *Sigma;
        Vector Priors;

    GaussianMixture(){
        Sigma = NULL;
    }

    void debug(void);
    /**
    * Initialise the model with parameters stored in a file
    *
    * load the different parameters ( priors, means, covariances matrices ..)
    * from a file generated by the saveParams function, or Matlab
    *
    * \param filename file containing the desired GMM description
    */
    bool loadParams(const char filename[]);

    /**
   * Perform Gaussian Mixture regression.
   *
   * \return a mean vector corresponding to the in vector.
   */
    void doRegression( Vector &x, Vector &xd);

    /**
   * Perform Gaussian Mixture regression.
   *
   * \return a mean vector corresponding to the in vector.
   */
    Vector doRegression( Vector in);

    /**
   *Compute probabilty of v ( corresponding to dimension given
   *in the Components vector) knowing state.
   */
    double pdfState(Vector v,IndicesVector Components,int state);

    /**
   *Compute probabilty of v ( corresponding to dimension given
   *in the Components vector) knowing state.
   */
    double pdfState(Vector &x,int & state);


    protected :
        Vector Pxi,sp,Mu_x_k,Mu_k,x_tmp,x_tmp2,x_tmp3;
        IndicesVector inComponents,outComponents;
        Matrix * subSigma;
        Matrix subMuIn;
        Matrix subMuOut;
        Matrix subSigmaIn;
        Matrix isubSigmaIn;
        Matrix subSigmaOut;
        double p_i,norm_f,spxi,tsum,c1,c2,det_Sigma_k,prob;
};

#ifdef USE_MATHLIB_NAMESPACE
}
#endif
#endif // GMR_LITE_H
